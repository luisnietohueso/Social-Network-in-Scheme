(module sn-social-network racket

  (provide 
   sn-ff-for
   sn-cmn-frnds-btwn
   sn-cmn-frnds
   sn-frnd-cnt
   sn-frndlst-user
   sn-unfrndlst-user  )

  (require "sn-graph.rkt")
  (require "sn-utils.rkt")

   (define my-dict
  (list
   (cons 'f2
         (list 'f3 'f4))
   (cons 'f3
         (list 'f2))
   (cons 'f4
         (list 'f3 'f2))
   (cons 'f13
         (list ))
   (cons 'f1
         (list ))
   ))
  
  ;; max-by : (a -> number) (list-of a) -> a
;; Given a function `func` and a list `lst`, returns the element of `lst` with the maximum value of `func`
;; return the element with the maximum 
  (define (max-by func lst)
  (if (null? lst)
      (error "empty list")
      (foldl (lambda (a b)
               (if (> (func a) (func b)) a b))
             (first lst)
             (rest lst))))
  ;; min-by : (a -> number) (list-of a) -> a
;; Given a function `func` and a list `lst`, returns the element of `lst` with the minimum value of `func`.
;; return the element with the  minimum 
  (define (min-by func lst)
  (if (null? lst)
      (error "empty list")
      (foldl (lambda (a b)
               (if (< (func a) (func b)) a b))
             (first lst)
             (rest lst))))


;; This function takes a graph and a user as input, and returns a list of the user's friends.
;; sn-ff-for : (dict-of symbol (set-of symbol)) symbol -> list-of-symbol  
(define (sn-ff-for graph user)
  (let ([friend-set (dict-ref graph user #f)])
    (if friend-set
        (set->list friend-set)
        '())))


;; sn-cmn-frnds-btwn : (dict-of symbol (set-of symbol)) symbol symbol -> list-of-symbol
  ;;This function takes a graph and two users as input, and returns a list of their common friends.
 (define (sn-cmn-frnds-btwn graph user1 user2)
  (let ([friend-set1 (dict-ref graph user1 #f)]
        [friend-set2 (dict-ref graph user2 #f)])
    (if (and friend-set1 friend-set2)
        (set->list (set-intersect friend-set1 friend-set2))
        '())))


  ;; sn-frnd-cnt : (dict-of symbol (set-of symbol)) -> list-of-pairs
  ;; This function takes a graph as input, and returns a list of users and their friend counts.
(define (sn-frnd-cnt graph)
  (map (lambda (user)
         (cons user (set-count (dict-ref graph user empty))))
       (dict-keys graph)))

;; sn-frndlst-user : (dict-of symbol (set-of symbol)) -> symbol
;;This function takes a graph as input, and returns the user with the most friends.
(define (sn-frndlst-user graph)
  (let ([users (dict-keys graph)])
    (let* ([counts (map (lambda (user)
                          (cons user (set-count (dict-ref graph user empty))))
                        users)])
      (max-by (lambda (x) (cdr x)) counts))))


  ;; sn-unfrndlst-user : (dict-of symbol (set-of symbol)) -> (cons symbol integer)       
  ;;This function takes a graph as input, and returns the user with the least friends.
(define (sn-unfrndlst-user graph)
  (let* ([counts (map (lambda (user)
                        (cons user (set-count (dict-ref graph user empty))))
                      (dict-keys graph))])
    (let ([min-count-pair (min-by (lambda (x) (cdr x)) counts)])
      min-count-pair)))


  ;; this is for free. Do not mdify (ROM)
  (define (sn-cmn-frnds-ff graph u)
    (let*
        ([keys (sn-users graph)]
         [vals (map
                (lambda (key)
                  (sn-cmn-frnds-btwn graph u key))
                keys)]
       
         )
      (sn-dict-ks-vs keys vals)))


  ;; this is for free. Do not mdify (ROM)
  (define (sn-cmn-frnds graph )
    (let*
        ([keys (sn-users graph)]
         [vals (map
                (lambda (key)
                  (sn-cmn-frnds-ff graph key))
                keys)]
         )
      (sn-dict-ks-vs keys vals)))

  )

